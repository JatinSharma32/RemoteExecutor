[
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Two Sum",
        "index": 1,
        "problemData": {
            "title": "Two Sum",
            "description": {
                "paragraphs": [
                    "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
                    "You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
                    "You can return the answer in any order."
                ],
                "images": [],
                "examples": [
                    {
                        "images": [],
                        "input": "nums = [2,7,11,15], target = 9",
                        "output": "[0,1]",
                        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
                    },
                    {
                        "images": [],
                        "input": "nums = [3,2,4], target = 6",
                        "output": "[1,2]",
                        "explanation": ""
                    },
                    {
                        "images": [],
                        "input": "nums = [3,3], target = 6",
                        "output": "[0,1]",
                        "explanation": ""
                    }
                ],
                "constraints": [
                    "2 <= nums.length <= 104",
                    "-109 <= nums[i] <= 109",
                    "-109 <= target <= 109",
                    "Only one valid answer exists."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Add Two Numbers",
        "index": 2,
        "problemData": {
            "title": "Add Two Numbers",
            "description": {
                "paragraphs": [
                    "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
                    "You may assume the two numbers do not contain any leading zero, except the number 0 itself."
                ],
                "images": [],
                "examples": [
                    {
                        "images": [
                            "https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"
                        ],
                        "input": "l1 = [2,4,3], l2 = [5,6,4]",
                        "output": "[7,0,8]",
                        "explanation": "342 + 465 = 807."
                    },
                    {
                        "input": "l1 = [0], l2 = [0]",
                        "output": "[0]"
                    },
                    {
                        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
                        "output": "[8,9,9,9,0,0,0,1]"
                    }
                ],
                "constraints": [
                    "The number of nodes in each linked list is in the range [1, 100].",
                    "0 <= Node.val <= 9",
                    "It is guaranteed that the list represents a number that does not have leading zeros."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Longest Substring Without Repeating Characters",
        "index": 3,
        "problemData": {
            "title": "Longest Substring Without Repeating Characters",
            "description": {
                "paragraphs": [
                    "Given a string s, find the length of the longest substring without repeating characters."
                ],
                "images": [],
                "examples": [
                    {
                        "input": "s = abcabcbb",
                        "output": "3",
                        "explanation": " The answer is abc, with the length of 3."
                    },
                    {
                        "input": " s = bbbbb",
                        "output": "1",
                        "explanation": "The answer is b"
                    },
                    {
                        "input": "s = pwwkew",
                        "output": " 3",
                        "explanation": "The answer is wke, with the length of 3. Notice that the answer must be a substring, pwke is a subsequence and not a substring."
                    }
                ],
                "constraints": [
                    "0 <= s.length <= 5 * 104",
                    "s consists of English letters, digits, symbols and spaces."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Median of Two Sorted Arrays",
        "index": 4,
        "problemData": {
            "title": "Median of Two Sorted Arrays",
            "description": {
                "paragraphs": [
                    "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.",
                    "The overall run time complexity should be O(log (m+n))."
                ],
                "images": [],
                "examples": [
                    {
                        "input": " nums1 = [1,3], nums2 = [2]",
                        "output": "2.00000",
                        "explanation": "merged array = [1,2,3] and median is 2."
                    },
                    {
                        "input": "nums1 = [1,2], nums2 = [3,4]",
                        "output": "2.50000",
                        "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
                    }
                ],
                "constraints": [
                    "nums1.length == m",
                    "nums2.length == n"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Longest Palindromic Substring",
        "index": 5,
        "problemData": {
            "title": "Longest Palindromic Substring",
            "description": {
                "paragraphs": [
                    "Given a string s, return the longest palindromic substring in s."
                ],
                "images": [],
                "examples": [
                    {
                        "input": "s = babad",
                        "output": "bab",
                        "explanation": "aba is also a valid answer."
                    },
                    {
                        "input": " s = cbbd",
                        "output": " bb"
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consist of only digits and English letters."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Zigzag Conversion",
        "index": 6,
        "problemData": {
            "title": "Zigzag Conversion",
            "description": {
                "paragraphs": [
                    "The string PAYPALISHIRING is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)",
                    "And then read line by line: PAHNAPLSIIGYIR",
                    "Write the code that will take a string and make this conversion given a number of rows:",
                    "string convert(string s, int numRows);"
                ],
                "images": [],
                "examples": [
                    {
                        "input": "s = PAYPALISHIRING, numRows = 3",
                        "output": "PAHNAPLSIIGYIR"
                    },
                    {
                        "input": " s = PAYPALISHIRING, numRows = 4",
                        "output": "PINALSIGYAHRPI"
                    },
                    {
                        "input": " s = A, numRows = 1",
                        "output": "A"
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists of English letters (lower-case and upper-case), ',' and '.'.",
                    "1 <= numRows <= 1000"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Reverse Integer",
        "index": 7,
        "problemData": {
            "title": "Reverse Integer",
            "description": {
                "paragraphs": [
                    "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.",
                    "Assume the environment does not allow you to store 64-bit integers (signed or unsigned)."
                ],
                "images": [],
                "examples": [
                    {
                        "input": "x = 123",
                        "output": " 321"
                    },
                    {
                        "input": " x = -123",
                        "output": "-321"
                    },
                    {
                        "input": "x = 120",
                        "output": "21"
                    }
                ],
                "constraints": [
                    "-231 <= x <= 231 - 1"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Palindrome Number",
        "index": 8,
        "problemData": {
            "title": "Palindrome Number",
            "description": {
                "paragraphs": [
                    "Given an integer x, return true if x is a palindrome, and false otherwise."
                ],
                "images": [],
                "examples": [
                    {
                        "input": " x = 121",
                        "output": " true",
                        "explanation": "121 reads as 121 from left to right and from right to left."
                    },
                    {
                        "input": "x = -121",
                        "output": "false",
                        "explanation": "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
                    },
                    {
                        "input": "x = 10",
                        "output": "false",
                        "explanation": "Reads 01 from right to left. Therefore it is not a palindrome."
                    }
                ],
                "constraints": [
                    "-231 <= x <= 231 - 1"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Regular Expression Matching",
        "index": 9,
        "problemData": {
            "title": "Regular Expression Matching",
            "description": {
                "paragraphs": [
                    "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:",
                    "'.' Matches any single character.\u00e2\u20ac\u2039\u00e2\u20ac\u2039\u00e2\u20ac\u2039\u00e2\u20ac\u2039",
                    "'*' Matches zero or more of the preceding element.",
                    "The matching should cover the entire input string (not partial)."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = aa, p = a",
                        "output": "false",
                        "explanation": "a does not match the entire string aa."
                    },
                    {
                        "input": "s = aa, p = a*",
                        "output": "true",
                        "explanation": "'*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes aa."
                    },
                    {
                        "input": "s = ab, p = .*",
                        "output": "true",
                        "explanation": ".* means zero or more (*) of any character (.)."
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 20",
                    "1 <= p.length <= 20",
                    "s contains only lowercase English letters.",
                    "p contains only lowercase English letters, '.', and '*'.",
                    "It is guaranteed for each appearance of the character '*', there will be a previous valid character to match."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Container With Most Water",
        "index": 10,
        "problemData": {
            "title": "Container With Most Water",
            "description": {
                "paragraphs": [
                    "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).",
                    "Find two lines that together with the x-axis form a container, such that the container contains the most water.",
                    "Return the maximum amount of water a container can store."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "height = [1,8,6,2,5,4,8,3,7]",
                        "output": "49",
                        "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
                    },
                    {
                        "input": "height = [1,1]",
                        "output": "1"
                    }
                ],
                "constraints": [
                    "n == height.length",
                    "2 <= n <= 105",
                    "0 <= height[i] <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Integer to Roman",
        "index": 11,
        "problemData": {
            "title": "Integer to Roman",
            "description": {
                "paragraphs": [
                    "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.",
                    "For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.",
                    "Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:",
                    "I can be placed before V (5) and X (10) to make 4 and 9. ",
                    "X can be placed before L (50) and C (100) to make 40 and 90. ",
                    "C can be placed before D (500) and M (1000) to make 400 and 900.",
                    "Given an integer, convert it to a roman numeral."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "num = 3",
                        "output": "III",
                        "explanation": " L = 50, V = 5, III = 3."
                    },
                    {
                        "input": " num = 58",
                        "output": " LVIII",
                        "explanation": "L = 50, V = 5, III = 3."
                    },
                    {
                        "input": "num = 1994",
                        "output": " MCMXCIV",
                        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
                    }
                ],
                "constraints": [
                    "1 <= num <= 3999"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Roman to Integer",
        "index": 12,
        "problemData": {
            "title": "Roman to Integer",
            "description": {
                "paragraphs": [
                    "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.",
                    "For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.",
                    "Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:",
                    "I can be placed before V (5) and X (10) to make 4 and 9. ",
                    "X can be placed before L (50) and C (100) to make 40 and 90. ",
                    "C can be placed before D (500) and M (1000) to make 400 and 900.",
                    "Given a roman numeral, convert it to an integer."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = III",
                        "output": " 3",
                        "explanation": " III = 3."
                    },
                    {
                        "input": "s = LVIII",
                        "output": "58",
                        "explanation": " L = 50, V= 5, III = 3."
                    },
                    {
                        "input": "s = MCMXCIV",
                        "output": "1994",
                        "explanation": " M = 1000, CM = 900, XC = 90 and IV = 4."
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 15",
                    "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').",
                    "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Longest Common Prefix",
        "index": 13,
        "problemData": {
            "title": "Longest Common Prefix",
            "description": {
                "paragraphs": [
                    "Write a function to find the longest common prefix string amongst an array of strings.",
                    "If there is no common prefix, return an empty string ."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " strs = [flower,flow,flight]",
                        "output": " fl"
                    },
                    {
                        "input": "strs = [dog,racecar,car]",
                        "output": "",
                        "explanation": "There is no common prefix among the input strings."
                    }
                ],
                "constraints": [
                    "1 <= strs.length <= 200",
                    "0 <= strs[i].length <= 200",
                    "strs[i] consists of only lowercase English letters."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "3Sum",
        "index": 14,
        "problemData": {
            "title": "3Sum",
            "description": {
                "paragraphs": [
                    "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.",
                    "Notice that the solution set must not contain duplicate triplets."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " nums = [-1,0,1,2,-1,-4]",
                        "output": "[[-1,-1,2],[-1,0,1]]",
                        "explanation": "nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter."
                    },
                    {
                        "input": "nums = [0,1,1]",
                        "output": "[]",
                        "explanation": "The only possible triplet does not sum up to 0."
                    },
                    {
                        "input": "nums = [0,0,0]",
                        "output": "[[0,0,0]]",
                        "explanation": "The only possible triplet sums up to 0."
                    }
                ],
                "constraints": [
                    "3 <= nums.length <= 3000",
                    "-105 <= nums[i] <= 105"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "3Sum Closest",
        "index": 15,
        "problemData": {
            "title": "3Sum Closest",
            "description": {
                "paragraphs": [
                    "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.",
                    "Return the sum of the three integers.",
                    "You may assume that each input would have exactly one solution."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [-1,2,1,-4], target = 1",
                        "output": "2",
                        "explanation": "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
                    },
                    {
                        "input": " nums = [0,0,0], target = 1",
                        "output": "0",
                        "explanation": "The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
                    }
                ],
                "constraints": [
                    "3 <= nums.length <= 500",
                    "-1000 <= nums[i] <= 1000",
                    "-104 <= target <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Letter Combinations of a Phone Number",
        "index": 16,
        "problemData": {
            "title": "Letter Combinations of a Phone Number",
            "description": {
                "paragraphs": [
                    "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.",
                    "A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "digits = 23",
                        "output": "[ad,ae,af,bd,be,bf,cd,ce,cf]"
                    },
                    {
                        "input": " digits =",
                        "output": "[]"
                    },
                    {
                        "input": "digits = 2",
                        "output": "[a,b,c]"
                    }
                ],
                "constraints": [
                    "0 <= digits.length <= 4",
                    "digits[i] is a digit in the range ['2', '9']."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "4Sum",
        "index": 17,
        "problemData": {
            "title": "4Sum",
            "description": {
                "paragraphs": [
                    "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:",
                    "0 <= a, b, c, d < n",
                    "a, b, c, and d are distinct.",
                    "nums[a] + nums[b] + nums[c] + nums[d] == target",
                    "You may return the answer in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,0,-1,0,-2,2], target = 0",
                        "output": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]"
                    },
                    {
                        "input": " nums = [2,2,2,2,2], target = 8",
                        "output": "[[2,2,2,2]]"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 200",
                    "-109 <= nums[i] <= 109",
                    "-109 <= target <= 109"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Remove Nth Node From End of List",
        "index": 18,
        "problemData": {
            "title": "Remove Nth Node From End of List",
            "description": {
                "paragraphs": [
                    "Given the head of a linked list, remove the nth node from the end of the list and return its head."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "head = [1,2,3,4,5], n = 2",
                        "output": "[1,2,3,5]"
                    },
                    {
                        "input": "head = [1], n = 1",
                        "output": "[]"
                    },
                    {
                        "input": "head = [1,2], n = 1",
                        "output": "[1]"
                    }
                ],
                "constraints": [
                    "The number of nodes in the list is sz.",
                    "1 <= sz <= 30",
                    "0 <= Node.val <= 100",
                    "    1 <= n <= sz"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Valid Parentheses",
        "index": 19,
        "problemData": {
            "title": "Valid Parentheses",
            "description": {
                "paragraphs": [
                    "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
                    "Open brackets must be closed by the same type of brackets.",
                    "Open brackets must be closed in the correct order.",
                    "    Every close bracket has a corresponding open bracket of the same type."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = ()",
                        "output": "true"
                    },
                    {
                        "input": " s = ()[]{}",
                        "output": " true"
                    },
                    {
                        "input": " s = (]",
                        "output": " false"
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 104",
                    "s consists of parentheses only '()[]{}'."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Merge Two Sorted Lists",
        "index": 20,
        "problemData": {
            "title": "Merge Two Sorted Lists",
            "description": {
                "paragraphs": [
                    "You are given the heads of two sorted linked lists list1 and list2.",
                    "Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.",
                    "Return the head of the merged linked list."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "list1 = [1,2,4], list2 = [1,3,4]",
                        "output": "[1,1,2,3,4,4]"
                    },
                    {
                        "input": "list1 = [], list2 = []",
                        "output": "[]"
                    },
                    {
                        "input": "list1 = [], list2 = [0]",
                        "output": "[0]"
                    }
                ],
                "constraints": [
                    "The number of nodes in both lists is in the range [0, 50].",
                    "-100 <= Node.val <= 100",
                    "Both list1 and list2 are sorted in non-decreasing order."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Generate Parentheses",
        "index": 21,
        "problemData": {
            "title": "Generate Parentheses",
            "description": {
                "paragraphs": [
                    "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 3",
                        "output": "[((())),(()()),(())(),()(()),()()()]"
                    },
                    {
                        "input": "n = 1",
                        "output": "[()]"
                    }
                ],
                "constraints": [
                    "1 <= n <= 8"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Merge k Sorted Lists",
        "index": 22,
        "problemData": {
            "title": "Merge k Sorted Lists",
            "description": {
                "paragraphs": [
                    "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.",
                    "Merge all the linked-lists into one sorted linked-list and return it."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " lists = [[1,4,5],[1,3,4],[2,6]]",
                        "output": " [1,1,2,3,4,4,5,6]",
                        "explanation": "The linked-lists are:[  1->4->5,  1->3->4,  2->6]merging them into one sorted list: 1->1->2->3->4->4->5->6"
                    },
                    {
                        "input": "lists = []",
                        "output": "[]"
                    },
                    {
                        "input": "lists = [[]]",
                        "output": "[]"
                    }
                ],
                "constraints": [
                    "k == lists.length",
                    "0 <= k <= 104",
                    "0 <= lists[i].length <= 500",
                    "-104 <= lists[i][j] <= 104",
                    "lists[i] is sorted in ascending order.",
                    "The sum of lists[i].length will not exceed 104."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Swap Nodes in Pairs",
        "index": 23,
        "problemData": {
            "title": "Swap Nodes in Pairs",
            "description": {
                "paragraphs": [
                    "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)"
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "head = [1,2,3,4]",
                        "output": "[2,1,4,3]"
                    },
                    {
                        "input": "head = []",
                        "output": "[]"
                    },
                    {
                        "input": "head = [1]",
                        "output": "[1]"
                    }
                ],
                "constraints": [
                    "The number of nodes in the list is in the range [0, 100].",
                    "0 <= Node.val <= 100"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Reverse Nodes in k-Group",
        "index": 24,
        "problemData": {
            "title": "Reverse Nodes in k-Group",
            "description": {
                "paragraphs": [
                    "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.",
                    "k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.",
                    "You may not alter the values in the list's nodes, only nodes themselves may be changed."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "head = [1,2,3,4,5], k = 2",
                        "output": "[2,1,4,3,5]"
                    },
                    {
                        "input": "head = [1,2,3,4,5], k = 3",
                        "output": "[3,2,1,4,5]"
                    }
                ],
                "constraints": [
                    "The number of nodes in the list is n.",
                    "1 <= k <= n <= 5000",
                    "0 <= Node.val <= 1000"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Find the Index of the First Occurrence in a String",
        "index": 25,
        "problemData": {
            "title": "Find the Index of the First Occurrence in a String",
            "description": {
                "paragraphs": [
                    "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "haystack = sadbutsad, needle = sad",
                        "output": " 0",
                        "explanation": "sad occurs at index 0 and 6.The first occurrence is at index 0, so we return 0."
                    },
                    {
                        "input": "haystack = leetcode, needle = leeto",
                        "output": "-1",
                        "explanation": " leeto did not occur in leetcode, so we return -1."
                    }
                ],
                "constraints": [
                    "1 <= haystack.length, needle.length <= 104",
                    "haystack and needle consist of only lowercase English characters."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Divide Two Integers",
        "index": 26,
        "problemData": {
            "title": "Divide Two Integers",
            "description": {
                "paragraphs": [
                    "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.",
                    "The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.",
                    "Return the quotient after dividing dividend by divisor.",
                    "Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u00e2\u02c6\u2019231, 231 \u00e2\u02c6\u2019 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "dividend = 10, divisor = 3",
                        "output": "3",
                        "explanation": "10/3 = 3.33333.. which is truncated to 3."
                    },
                    {
                        "input": "dividend = 7, divisor = -3",
                        "output": " -2",
                        "explanation": "7/-3 = -2.33333.. which is truncated to -2."
                    }
                ],
                "constraints": [
                    "-231 <= dividend, divisor <= 231 - 1",
                    "divisor != 0"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Substring with Concatenation of All Words",
        "index": 27,
        "problemData": {
            "title": "Substring with Concatenation of All Words",
            "description": {
                "paragraphs": [
                    "You are given a string s and an array of strings words. All the strings of words are of the same length.",
                    "A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.",
                    "For example, if words = [ab,cd,ef], then abcdef, abefcd, cdabef, cdefab, efabcd, and efcdab are all concatenated strings. acdbef is not a concatenated substring because it is not the concatenation of any permutation of words.",
                    "Return the starting indices of all the concatenated substrings in s. You can return the answer in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " s = barfoothefoobarman, words = [foo,bar]",
                        "output": "[0,9]",
                        "explanation": "Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.The substring starting at 0 is 'barfoo'. It is the concatenation of ['bar','foo'] which is a permutation of words.The substring starting at 9 is 'foobar'. It is the concatenation of ['foo','bar'] which is a permutation of words.The output order does not matter. Returning [9,0] is fine too."
                    },
                    {
                        "input": " s = wordgoodgoodgoodbestword, words = [word,good,best,word]",
                        "output": "[]",
                        "explanation": "Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16. There is no substring of length 16 in s that is equal to the concatenation of any permutation of words. We return an empty array."
                    },
                    {
                        "input": "s = barfoofoobarthefoobarman, words = [bar,foo,the]",
                        "output": "[6,9,12]",
                        "explanation": " Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9. The substring starting at 6 is foobarthe. It is the concatenation of [foo,bar,the] which is a permutation of words. The substring starting at 9 is barthefoo. It is the concatenation of [bar,the,foo] which is a permutation of words. The substring starting at 12 is thefoobar. It is the concatenation of [the,foo,bar] which is a permutation of words."
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 104",
                    "1 <= words.length <= 5000",
                    "1 <= words[i].length <= 30",
                    "s and words[i] consist of lowercase English letters."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": " Next Permutation",
        "index": 28,
        "problemData": {
            "title": " Next Permutation",
            "description": {
                "paragraphs": [
                    "A permutation of an array of integers is an arrangement of its members into a sequence or linear order",
                    "For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].",
                    "The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).",
                    "For example, the next permutation of arr = [1,2,3] is [1,3,2].",
                    "Similarly, the next permutation of arr = [2,3,1] is [3,1,2].",
                    "While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.",
                    "Given an array of integers nums, find the next permutation of nums.",
                    "The replacement must be in place and use only constant extra memory."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,2,3]",
                        "output": "[1,3,2]"
                    },
                    {
                        "input": "nums = [3,2,1]",
                        "output": "[1,2,3]"
                    },
                    {
                        "input": " nums = [1,1,5]",
                        "output": "[1,5,1]"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 100",
                    "0 <= nums[i] <= 100"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Longest Valid Parentheses",
        "index": 29,
        "problemData": {
            "title": "Longest Valid Parentheses",
            "description": {
                "paragraphs": [
                    "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = (()",
                        "output": " 2",
                        "explanation": "The longest valid parentheses substring is ()."
                    },
                    {
                        "input": "s = )()())",
                        "output": " 4",
                        "explanation": "The longest valid parentheses substring is ()()."
                    },
                    {
                        "input": "s = ",
                        "output": "0"
                    }
                ],
                "constraints": [
                    "0 <= s.length <= 3 * 104",
                    "s[i] is '(', or ')'"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Search in Rotated Sorted Array",
        "index": 30,
        "problemData": {
            "title": "Search in Rotated Sorted Array",
            "description": {
                "paragraphs": [
                    "There is an integer array nums sorted in ascending order (with distinct values).",
                    "Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].",
                    "Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
                    "You must write an algorithm with O(log n) runtime complexity."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [4,5,6,7,0,1,2], target = 0",
                        "output": " 4"
                    },
                    {
                        "input": "nums = [4,5,6,7,0,1,2], target = 3",
                        "output": " -1"
                    },
                    {
                        "input": " nums = [1], target = 0",
                        "output": "-1"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 5000",
                    "-104 <= nums[i] <= 104",
                    "All values of nums are unique.",
                    "nums is an ascending array that is possibly rotated.",
                    "-104 <= target <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": " Find First and Last Position of Element in Sorted Array",
        "index": 31,
        "problemData": {
            "title": " Find First and Last Position of Element in Sorted Array",
            "description": {
                "paragraphs": [
                    "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.",
                    "If target is not found in the array, return [-1, -1].",
                    "You must write an algorithm with O(log n) runtime complexity."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [5,7,7,8,8,10], target = 8",
                        "output": "[3,4]"
                    },
                    {
                        "input": " nums = [5,7,7,8,8,10], target = 6",
                        "output": "[-1,-1]"
                    },
                    {
                        "input": "nums = [], target = 0",
                        "output": "[-1,-1]"
                    }
                ],
                "constraints": [
                    "0 <= nums.length <= 105",
                    "-109 <= nums[i] <= 109",
                    "nums is a non-decreasing array.",
                    "-109 <= target <= 109"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Search Insert Position",
        "index": 32,
        "problemData": {
            "title": "Search Insert Position",
            "description": {
                "paragraphs": [
                    "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
                    "You must write an algorithm with O(log n) runtime complexity."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,3,5,6], target = 5",
                        "output": "2"
                    },
                    {
                        "input": "nums = [1,3,5,6], target = 2",
                        "output": " 1"
                    },
                    {
                        "input": "nums = [1,3,5,6], target = 7",
                        "output": " 4"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 104",
                    "-104 <= nums[i] <= 104",
                    "nums contains distinct values sorted in ascending order.",
                    "-104 <= target <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Count and Say",
        "index": 33,
        "problemData": {
            "title": "Count and Say",
            "description": {
                "paragraphs": [
                    "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:",
                    "countAndSay(1) = 1",
                    "countAndSay(n) is the way you would say the digit string from countAndSay(n-1), which is then converted into a different digit string.",
                    "To determine how you say a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 1",
                        "output": "1",
                        "explanation": "This is the base case."
                    },
                    {
                        "input": " n = 4",
                        "output": " 1211",
                        "explanation": "countAndSay(1) = '1' countAndSay(2) = say '1' = one 1 = '11' countAndSay(3) = say '11' = two 1's = '21' countAndSay(4) = say '21' = one 2 + one 1 = '12' + '11' = '1211'"
                    }
                ],
                "constraints": [
                    "1 <= n <= 30"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Combination Sum",
        "index": 34,
        "problemData": {
            "title": "Combination Sum",
            "description": {
                "paragraphs": [
                    "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.",
                    "The same number may be chosen from candidates an unlimited number of times Two combinations are unique if the frequency of at least one of the chosen numbers is different.",
                    "The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "candidates = [2,3,6,7], target = 7",
                        "output": "",
                        "explanation": "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations."
                    },
                    {
                        "input": "candidates = [2,3,5], target = 8",
                        "output": "[[2,2,2,2],[2,3,3],[3,5]]"
                    },
                    {
                        "input": "candidates = [2], target = 1",
                        "output": "[]"
                    }
                ],
                "constraints": [
                    "1 <= candidates.length <= 30",
                    "2 <= candidates[i] <= 40",
                    "All elements of candidates are distinct.",
                    "1 <= target <= 40"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Combination Sum II",
        "index": 35,
        "problemData": {
            "title": "Combination Sum II",
            "description": {
                "paragraphs": [
                    "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.",
                    "Each number in candidates may only be used once in the combination.",
                    "Note: The solution set must not contain duplicate combinations."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "candidates = [10,1,2,7,6,1,5], target = 8",
                        "output": "[ [1,1,6], [1,2,5], [1,7], [2,6] ]"
                    },
                    {
                        "input": "candidates = [2,5,2,1,2], target = 5",
                        "output": "[ [1,2,2], [5] ]"
                    }
                ],
                "constraints": [
                    "1 <= candidates.length <= 100",
                    "1 <= candidates[i] <= 50",
                    "1 <= target <= 30"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "First Missing Positive",
        "index": 36,
        "problemData": {
            "title": "First Missing Positive",
            "description": {
                "paragraphs": [
                    "Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.",
                    "You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,2,0]",
                        "output": "3",
                        "explanation": "The numbers in the range [1,2] are all in the array."
                    },
                    {
                        "input": "nums = [3,4,-1,1]",
                        "output": "2",
                        "explanation": "1 is in the array but 2 is missing."
                    },
                    {
                        "input": "nums = [7,8,9,11,12]",
                        "output": " 1",
                        "explanation": "The smallest positive integer 1 is missing."
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 105",
                    "-231 <= nums[i] <= 231 - 1"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Trapping Rain Water",
        "index": 37,
        "problemData": {
            "title": "Trapping Rain Water",
            "description": {
                "paragraphs": [
                    "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " height = [0,1,0,2,1,0,1,3,2,1,2,1]",
                        "output": " 6",
                        "explanation": "The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
                    },
                    {
                        "input": " height = [4,2,0,3,2,5]",
                        "output": "9"
                    }
                ],
                "constraints": [
                    "n == height.length",
                    "1 <= n <= 2 * 104",
                    "0 <= height[i] <= 105"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Multiply Strings",
        "index": 38,
        "problemData": {
            "title": "Multiply Strings",
            "description": {
                "paragraphs": [
                    "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.",
                    "Note: You must not use any built-in BigInteger library or convert the inputs to integer directly."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " num1 = 2, num2 = 3",
                        "output": "6"
                    },
                    {
                        "input": "num1 = 123, num2 = 456",
                        "output": "56088"
                    }
                ],
                "constraints": [
                    "1 <= num1.length, num2.length <= 200",
                    "num1 and num2 consist of digits only.",
                    "Both num1 and num2 do not contain any leading zero, except the number 0 itself."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Wildcard Matching",
        "index": 39,
        "problemData": {
            "title": "Wildcard Matching",
            "description": {
                "paragraphs": [
                    "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:",
                    "'?' Matches any single character.",
                    "'*' Matches any sequence of characters (including the empty sequence).",
                    "The matching should cover the entire input string (not partial)."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = aa, p = a",
                        "output": " false",
                        "explanation": "a does not match the entire string aa."
                    },
                    {
                        "input": "s = aa, p = *",
                        "output": "true",
                        "explanation": " '*' matches any sequence."
                    },
                    {
                        "input": " s = cb, p = ?a",
                        "output": "false",
                        "explanation": "'?' matches 'c', but the second letter is 'a', which does not match 'b'."
                    }
                ],
                "constraints": [
                    "0 <= s.length, p.length <= 2000",
                    "s contains only lowercase English letters.",
                    "p contains only lowercase English letters, '?' or '*'."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": " Jump Game II",
        "index": 40,
        "problemData": {
            "title": " Jump Game II",
            "description": {
                "paragraphs": [
                    "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].",
                    "Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:",
                    " 0 <= j <= nums[i] and i + j < n",
                    "Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1]."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " nums = [2,3,1,1,4]",
                        "output": " 2",
                        "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
                    },
                    {
                        "input": "nums = [2,3,0,1,4]",
                        "output": " 2"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 104",
                    "0 <= nums[i] <= 1000",
                    "It's guaranteed that you can reach nums[n - 1]."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Permutations ",
        "index": 41,
        "problemData": {
            "title": "Permutations ",
            "description": {
                "paragraphs": [
                    "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,2,3]",
                        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
                    },
                    {
                        "input": " nums = [0,1]",
                        "output": "[[0,1],[1,0]]"
                    },
                    {
                        "input": "nums = [1]",
                        "output": "[[1]]"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 6",
                    "-10 <= nums[i] <= 10",
                    "All the integers of nums are unique."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Permutations II",
        "index": 42,
        "problemData": {
            "title": "Permutations II",
            "description": {
                "paragraphs": [
                    "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " nums = [1,1,2]",
                        "output": "[[1,1,2], [1,2,1], [2,1,1]]"
                    },
                    {
                        "input": "nums = [1,2,3]",
                        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 8",
                    "-10 <= nums[i] <= 10"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Rotate Image",
        "index": 43,
        "problemData": {
            "title": "Rotate Image",
            "description": {
                "paragraphs": [
                    "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "[[7,4,1],[8,5,2],[9,6,3]]"
                    },
                    {
                        "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                        "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]"
                    }
                ],
                "constraints": [
                    "n == matrix.length == matrix[i].length",
                    "1 <= n <= 20",
                    "-1000 <= matrix[i][j] <= 1000"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Group Anagrams",
        "index": 44,
        "problemData": {
            "title": "Group Anagrams",
            "description": {
                "paragraphs": [
                    "Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " strs = [eat,tea,tan,ate,nat,bat]",
                        "output": "[[bat],[nat,tan],[ate,eat,tea]]"
                    },
                    {
                        "input": "strs = ['']",
                        "output": " [['']]"
                    },
                    {
                        "input": "strs = [a]",
                        "output": "[[a]]"
                    }
                ],
                "constraints": [
                    " 1 <= strs.length <= 1040 <= strs[i].length <= 100 strs[i] consists of lowercase English letters. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Pow(x, n)",
        "index": 45,
        "problemData": {
            "title": "Pow(x, n)",
            "description": {
                "paragraphs": [
                    "Implement pow(x, n), which calculates x raised to the power n (i.e., xn)."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " x = 2.00000, n = 10",
                        "output": "1024.00000"
                    },
                    {
                        "input": "x = 2.10000, n = 3",
                        "output": " 9.26100"
                    },
                    {
                        "input": "x = 2.00000, n = -2",
                        "output": " 0.25000",
                        "explanation": "2-2 = 1/22 = 1/4 = 0.25"
                    }
                ],
                "constraints": [
                    " -100.0 < x < 100.0-231 <= n <= 231-1 n is an integer. Either x is not zero or n > 0.-104 <= xn <= 104 "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "N-Queens",
        "index": 46,
        "problemData": {
            "title": "N-Queens",
            "description": {
                "paragraphs": [
                    "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order. Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "n = 4",
                        "output": "[[.Q..,...Q,Q...,..Q.],[..Q.,Q...,...Q,.Q..]]",
                        "explanation": "There exist two distinct solutions to the 4-queens puzzle as shown above"
                    },
                    {
                        "input": "n = 1",
                        "output": "[[Q]]"
                    }
                ],
                "constraints": [
                    "1 <= n <= 9"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "N-Queens II",
        "index": 47,
        "problemData": {
            "title": "N-Queens II",
            "description": {
                "paragraphs": [
                    "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an integer n, return the number of distinct solutions to the n-queens puzzle."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 4",
                        "output": " 2",
                        "explanation": " There are two distinct solutions to the 4-queens puzzle as shown."
                    },
                    {
                        "input": "n = 1",
                        "output": " 1"
                    }
                ],
                "constraints": [
                    "1 <= n <= 9"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": " Maximum Subarray",
        "index": 48,
        "problemData": {
            "title": " Maximum Subarray",
            "description": {
                "paragraphs": [
                    "Given an integer array nums, find the subarray with the largest sum, and return its sum."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
                        "output": "6",
                        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
                    },
                    {
                        "input": "nums = [1]",
                        "output": " 1",
                        "explanation": "The subarray [1] has the largest sum 1."
                    },
                    {
                        "input": "nums = [5,4,-1,7,8]",
                        "output": "23",
                        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
                    }
                ],
                "constraints": [
                    " 1 <= nums.length <= 105 -104 <= nums[i] <= 104 "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Spiral Matrix",
        "index": 49,
        "problemData": {
            "title": "Spiral Matrix",
            "description": {
                "paragraphs": [
                    "Given an m x n matrix, return all elements of the matrix in spiral order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "[1,2,3,6,9,8,7,4,5]"
                    },
                    {
                        "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                        "output": "[1,2,3,4,8,12,11,10,9,5,6,7]"
                    }
                ],
                "constraints": [
                    " m == matrix.length n == matrix[i].length 1 <= m, n <= 10 -100 <= matrix[i][j] <= 100"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Jump Game",
        "index": 50,
        "problemData": {
            "title": "Jump Game",
            "description": {
                "paragraphs": [
                    "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [2,3,1,1,4]",
                        "output": "true",
                        "explanation": " Jump 1 step from index 0 to 1, then 3 steps to the last index."
                    },
                    {
                        "input": " nums = [3,2,1,0,4]",
                        "output": "false",
                        "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
                    }
                ],
                "constraints": [
                    "1 <= nums.length <= 104 0 <= nums[i] <= 105 "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": " Merge Intervals ",
        "index": 51,
        "problemData": {
            "title": " Merge Intervals ",
            "description": {
                "paragraphs": [
                    "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
                        "output": " [[1,6],[8,10],[15,18]]",
                        "explanation": " Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
                    },
                    {
                        "input": "intervals = [[1,4],[4,5]]",
                        "output": "[[1,5]]",
                        "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
                    }
                ],
                "constraints": [
                    " 1 <= intervals.length <= 104 intervals[i].length == 2 0 <= starti <= endi <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Insert Interval",
        "index": 52,
        "problemData": {
            "title": "Insert Interval",
            "description": {
                "paragraphs": [
                    "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). Return intervals after the insertion. Note that you don't need to modify intervals in-place. You can make a new array and return it. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
                        "output": " [[1,5],[6,9]]"
                    },
                    {
                        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
                        "output": " [[1,2],[3,10],[12,16]]",
                        "explanation": "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
                    }
                ],
                "constraints": [
                    " 0 <= intervals.length <= 104 intervals[i].length == 2 0 <= starti <= endi <= 105 intervals is sorted by starti in ascending order. newInterval.length == 2 0 <= start <= end <= 105"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Length of Last Word",
        "index": 53,
        "problemData": {
            "title": " Length of Last Word",
            "description": {
                "paragraphs": [
                    "Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal  substring consisting of non-space characters only. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = Hello World",
                        "output": " 5",
                        "explanation": "The last word is World with length 5."
                    },
                    {
                        "input": " s = fly me   to   the moon   ",
                        "output": " 4",
                        "explanation": "The last word is moon with length 4."
                    },
                    {
                        "input": " s = luffy is still joyboy",
                        "output": "6",
                        "explanation": "The last word is joyboy with length 6."
                    }
                ],
                "constraints": [
                    "1 <= s.length <= 104 s consists of only English letters and spaces ' '. There will be at least one word in s."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Spiral Matrix II",
        "index": 54,
        "problemData": {
            "title": "Spiral Matrix II",
            "description": {
                "paragraphs": [
                    "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order"
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 3",
                        "output": "[[1,2,3],[8,9,4],[7,6,5]]"
                    },
                    {
                        "input": "n = 1",
                        "output": "[[1]]"
                    }
                ],
                "constraints": [
                    "1 <= n <= 20"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Permutation Sequence",
        "index": 55,
        "problemData": {
            "title": "Permutation Sequence",
            "description": {
                "paragraphs": [
                    "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.By listing and labeling all of the permutations in order, we get the following sequence for n = 3: 123 132 213 231 312 321 Given n and k, return the kth permutation sequence."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 3, k = 3",
                        "output": "213"
                    },
                    {
                        "input": "n = 4, k = 9",
                        "output": "2314"
                    },
                    {
                        "input": "n = 3, k = 1",
                        "output": "123"
                    }
                ],
                "constraints": [
                    "1 <= n <= 9 1 <= k <= n!"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Rotate List",
        "index": 56,
        "problemData": {
            "title": " Rotate List",
            "description": {
                "paragraphs": [
                    "Given the head of a linked list, rotate the list to the right by k places."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " head = [1,2,3,4,5], k = 2",
                        "output": "[4,5,1,2,3]"
                    },
                    {
                        "input": " head = [0,1,2], k = 4",
                        "output": "[2,0,1]"
                    }
                ],
                "constraints": [
                    "The number of nodes in the list is in the range [0, 500].-100 <= Node.val <= 100 0 <= k <= 2 * 109"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Unique Paths",
        "index": 57,
        "problemData": {
            "title": "Unique Paths",
            "description": {
                "paragraphs": [
                    "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.The test cases are generated so that the answer will be less than or equal to 2 * 109."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "m = 3, n = 7",
                        "output": "28"
                    },
                    {
                        "input": " m = 3, n = 2",
                        "output": "3",
                        "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:,"
                    }
                ],
                "constraints": [
                    "1 <= m, n <= 100"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Unique Paths II ",
        "index": 58,
        "problemData": {
            "title": "Unique Paths II ",
            "description": {
                "paragraphs": [
                    "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.Return the number of possible unique paths that the robot can take to reach the bottom-right corner.The testcases are generated so that the answer will be less than or equal to 2 * 109."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
                        "output": "2",
                        "explanation": " There is one obstacle in the middle of the 3x3 grid above.There are two ways to reach the bottom-right corner:1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right"
                    },
                    {
                        "input": " obstacleGrid = [[0,1],[0,0]]",
                        "output": "1"
                    }
                ],
                "constraints": [
                    " m == obstacleGrid.length n == obstacleGrid[i].length 1 <= m, n <= 100 obstacleGrid[i][j] is 0 or 1."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Minimum Path Sum ",
        "index": 59,
        "problemData": {
            "title": "Minimum Path Sum ",
            "description": {
                "paragraphs": [
                    "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " grid = [[1,3,1],[1,5,1],[4,2,1]]",
                        "output": " 7",
                        "explanation": "Because the path 1 \u00e2\u2020\u2019 3 \u00e2\u2020\u2019 1 \u00e2\u2020\u2019 1 \u00e2\u2020\u2019 1 minimizes the sum."
                    },
                    {
                        "input": "grid = [[1,2,3],[4,5,6]]",
                        "output": "12"
                    }
                ],
                "constraints": [
                    " m == grid.length n == grid[i].length 1 <= m, n <= 200  0 <= grid[i][j] <= 200 "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Valid Number ",
        "index": 60,
        "problemData": {
            "title": "Valid Number ",
            "description": {
                "paragraphs": [
                    "A valid number can be split up into these components (in order):A decimal number or an integer.(Optional) An 'e' or 'E', followed by an integer. A decimal number can be split up into these components (in order): (Optional) A sign character (either '+' or '-'). One of the following formats: One or more digits, followed by a dot '.'. One or more digits, followed by a dot '.', followed by one or more digits. A dot '.', followed by one or more digits. An integer can be split up into these components (in order): (Optional) A sign character (either '+' or '-'). One or more digits. For example, all the following are valid numbers: [ 2, 0089, -0.1, +3.14, 4., -.9, 2e10, -90E3, 3e+7, +6e-1, 53.5e93, -123.456e789], while the following are not valid numbers: [abc,1a, 1e, e3,99e2.5, --6, -+3,95a54e53]. Given a string s, return true if s is a valid number. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = 0",
                        "output": "true"
                    },
                    {
                        "input": "s = e",
                        "output": "false"
                    },
                    {
                        "input": " s = .",
                        "output": "false"
                    }
                ],
                "constraints": [
                    " 1 <= s.length <= 20 s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Plus One",
        "index": 61,
        "problemData": {
            "title": "Plus One",
            "description": {
                "paragraphs": [
                    "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.Increment the large integer by one and return the resulting array of digits. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "digits = [1,2,3]",
                        "output": "[1,2,4]",
                        "explanation": "The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4]."
                    },
                    {
                        "input": "digits = [4,3,2,1]",
                        "output": "[4,3,2,2]",
                        "explanation": " The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2]."
                    },
                    {
                        "input": "digits = [9]",
                        "output": "[1,0]",
                        "explanation": "The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0]."
                    }
                ],
                "constraints": [
                    " 1 <= digits.length <= 100 0 <= digits[i] <= 9 digits does not contain any leading 0's. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Add Binary ",
        "index": 62,
        "problemData": {
            "title": " Add Binary ",
            "description": {
                "paragraphs": [
                    "Given two binary strings a and b, return their sum as a binary string."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " a = 11, b = 1",
                        "output": "100"
                    },
                    {
                        "input": " a = 1010, b = 1011",
                        "output": "10101"
                    }
                ],
                "constraints": [
                    " 1 <= a.length, b.length <= 104 a and b consist only of '0' or '1' characters. Each string does not contain leading zeros except for the zero itself. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Text Justification ",
        "index": 63,
        "problemData": {
            "title": "Text Justification ",
            "description": {
                "paragraphs": [
                    "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words. Note: A word is defined as a character sequence consisting of non-space characters only. Each word's length is guaranteed to be greater than 0 and not exceed maxWidth. The input array words contains at least one word. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "words = [This, is, an, example, of text justification.maxWidth = 16",
                        "output": "This    is    an,example  of text,justification.  "
                    },
                    {
                        "input": "words = [What,must,be,acknowledgment,shall,be], maxWidth = 16",
                        "output": "What   must   be, acknowledgment  , shall be        ",
                        "explanation": " Note that the last line is shall be     instead of shall     be, because the last line must be left-justified instead of fully-justified. Note that the second line is also left-justified because it contains only one word."
                    },
                    {
                        "input": " words = [Science,is,what,we,understand,well,enough,to,explain,to,a,computer.,Art,is,everything,else,we,do], maxWidth = 20",
                        "output": " Science  is  what we, understand      well, enough to explain to, a  computer.  Art is, everything  else  we, do "
                    }
                ],
                "constraints": [
                    " 1 <= words.length <= 300 1 <= words[i].length <= 20 words[i] consists of only English letters and symbols. 1 <= maxWidth <= 100 words[i].length <= maxWidth"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Sqrt(x)    ",
        "index": 64,
        "problemData": {
            "title": "Sqrt(x)    ",
            "description": {
                "paragraphs": [
                    "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well. You must not use any built-in exponent function or operator. For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "x = 4",
                        "output": "2",
                        "explanation": "The square root of 4 is 2, so we return 2."
                    },
                    {
                        "input": "x = 8",
                        "output": "2",
                        "explanation": "The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
                    }
                ],
                "constraints": [
                    "0 <= x <= 231 - 1"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Climbing Stairs    ",
        "index": 65,
        "problemData": {
            "title": "Climbing Stairs    ",
            "description": {
                "paragraphs": [
                    "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "n = 2",
                        "output": " 2",
                        "explanation": "There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps"
                    },
                    {
                        "input": " n = 3",
                        "output": " 3",
                        "explanation": " There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps  3. 2 steps + 1 step"
                    }
                ],
                "constraints": [
                    "1 <= n <= 45"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Simplify Path    ",
        "index": 66,
        "problemData": {
            "title": "Simplify Path    ",
            "description": {
                "paragraphs": [
                    "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path. In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names. The canonical path should have the following format: The path starts with a single slash '/'. Any two directories are separated by a single slash '/'. The path does not end with a trailing '/'. The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..') Return the simplified canonical path. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "path = /home/",
                        "output": " /home",
                        "explanation": " Note that there is no trailing slash after the last directory name."
                    },
                    {
                        "input": "path = /../",
                        "output": " /",
                        "explanation": "Going one level up from the root directory is a no-op, as the root level is the highest level you can go."
                    },
                    {
                        "input": "path = /home//foo/",
                        "output": "/home/foo",
                        "explanation": "In the canonical path, multiple consecutive slashes are replaced by a single one."
                    }
                ],
                "constraints": [
                    " 1 <= path.length <= 3000 path consists of English letters, digits, period '.', slash '/' or '_'. path is a valid absolute Unix path. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Edit Distance    ",
        "index": 67,
        "problemData": {
            "title": "Edit Distance    ",
            "description": {
                "paragraphs": [
                    "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.You have the following three operations permitted on a word: Insert a character Delete a character Replace a character"
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "word1 = horse, word2 = ros",
                        "output": "3",
                        "explanation": "horse -> rorse (replace 'h' with 'r') rorse -> ro(remove 'r') rose -> ros (remove 'e')"
                    },
                    {
                        "input": "word1 = intention, word2 = execution",
                        "output": "5",
                        "explanation": "intention -> inention (remove 't') inention -> enention (replace 'i' with 'e') enention -> exention (replace 'n' with 'x') exention -> exection (replace 'n' with 'c') exection -> execution (insert 'u')"
                    }
                ],
                "constraints": [
                    " 0 <= word1.length, word2.length <= 500 word1 and word2 consist of lowercase English letters. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Set Matrix Zeroes    ",
        "index": 68,
        "problemData": {
            "title": "Set Matrix Zeroes    ",
            "description": {
                "paragraphs": [
                    "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. You must do it in place."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " matrix = [[1,1,1],[1,0,1],[1,1,1]]",
                        "output": "[[1,0,1],[0,0,0],[1,0,1]]"
                    },
                    {
                        "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
                        "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
                    }
                ],
                "constraints": [
                    " m == matrix.length n == matrix[0].length 1 <= m, n <= 200 -231 <= matrix[i][j] <= 231 - 1 "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Search a 2D Matrix    ",
        "index": 69,
        "problemData": {
            "title": "Search a 2D Matrix    ",
            "description": {
                "paragraphs": [
                    "You are given an m x n integer matrix matrix with the following two properties: Each row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer target, return true if target is in matrix or false otherwise. You must write a solution in O(log(m * n)) time complexity."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
                        "output": "true"
                    },
                    {
                        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
                        "output": "false"
                    }
                ],
                "constraints": [
                    " m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -104 <= matrix[i][j], target <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": " Sort Colors    ",
        "index": 70,
        "problemData": {
            "title": " Sort Colors    ",
            "description": {
                "paragraphs": [
                    "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [2,0,2,1,1,0]",
                        "output": "[0,0,1,1,2,2]"
                    },
                    {
                        "input": " nums = [2,0,1]",
                        "output": "[0,1,2]"
                    }
                ],
                "constraints": [
                    " n == nums.length 1 <= n <= 300 nums[i] is either 0, 1, or 2. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Minimum Window Substring",
        "index": 71,
        "problemData": {
            "title": "Minimum Window Substring",
            "description": {
                "paragraphs": [
                    "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string . The testcases will be generated such that the answer is unique"
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " s = ADOBECODEBANC, t = ABC",
                        "output": "BANC",
                        "explanation": " The minimum window substring BANC includes 'A', 'B', and 'C' from string t."
                    },
                    {
                        "input": "s = a, t = a",
                        "output": " a",
                        "explanation": " The entire string s is the minimum window."
                    },
                    {
                        "input": " s = a, t = aa",
                        "output": "",
                        "explanation": "Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string."
                    }
                ],
                "constraints": [
                    " m == s.length n == t.length 1 <= m, n <= 105 s and t consist of uppercase and lowercase English letters."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Combinations    ",
        "index": 72,
        "problemData": {
            "title": "Combinations    ",
            "description": {
                "paragraphs": [
                    "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].You may return the answer in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 4, k = 2",
                        "output": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                        "explanation": "There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination."
                    },
                    {
                        "input": " n = 1, k = 1",
                        "output": "[[1]]",
                        "explanation": "There is 1 choose 1 = 1 total combination."
                    }
                ],
                "constraints": [
                    " 1 <= n <= 20 1 <= k <= n"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Subsets    ",
        "index": 73,
        "problemData": {
            "title": " Subsets    ",
            "description": {
                "paragraphs": [
                    "Given an integer array nums of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,2,3]",
                        "output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]"
                    },
                    {
                        "input": "nums = [0]",
                        "output": "[[],[0]]"
                    }
                ],
                "constraints": [
                    " 1 <= nums.length <= 10 -10 <= nums[i] <= 10 All the numbers of nums are unique. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Word Search    ",
        "index": 74,
        "problemData": {
            "title": "Word Search    ",
            "description": {
                "paragraphs": [
                    "Given an m x n grid of characters board and a string word, return true if word exists in the grid.The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "board = [[A,B,C,E],[S,F,C,S],[A,D,E,E]], word = ABCCED",
                        "output": " true"
                    },
                    {
                        "input": "board = [[A,B,C,E],[S,F,C,S],[A,D,E,E]], word = SEE",
                        "output": "true"
                    },
                    {
                        "input": " board = [[A,B,C,E],[S,F,C,S],[A,D,E,E]], word = ABCB",
                        "output": "false"
                    }
                ],
                "constraints": [
                    " m == board.length n = board[i].length 1 <= m, n <= 6 1 <= word.length <= 15 board and word consists of only lowercase and uppercase English letters. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Remove Duplicates from Sorted Array II    ",
        "index": 75,
        "problemData": {
            "title": "Remove Duplicates from Sorted Array II    ",
            "description": {
                "paragraphs": [
                    "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; //Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length for (int i = 0; i < k; i++)  assert nums[i] == expected Num[i]; } If all assertions pass, then your solution will be accepted."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,1,1,2,2,3]",
                        "output": " 5, nums = [1,1,2,2,3,_]",
                        "explanation": "Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores)."
                    },
                    {
                        "input": " nums = [0,0,1,1,1,1,2,3,3]",
                        "output": "7, nums = [0,0,1,1,2,3,3,_,_]",
                        "explanation": "Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores)."
                    }
                ],
                "constraints": [
                    " 1 <= nums.length <= 3 * 104 -104 <= nums[i] <= 104 nums is sorted in non-decreasing order. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Search in Rotated Sorted Array II    ",
        "index": 76,
        "problemData": {
            "title": " Search in Rotated Sorted Array II    ",
            "description": {
                "paragraphs": [
                    "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values). Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].  Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums. You must decrease the overall operation steps as much as possible. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [2,5,6,0,0,1,2], target = 0",
                        "output": "true"
                    },
                    {
                        "input": "nums = [2,5,6,0,0,1,2], target = 3",
                        "output": "false"
                    }
                ],
                "constraints": [
                    " 1 <= nums.length <= 5000 -104 <= nums[i] <= 104 nums is guaranteed to be rotated at some pivot. -104 <= target <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Remove Duplicates from Sorted List II    ",
        "index": 77,
        "problemData": {
            "title": "Remove Duplicates from Sorted List II    ",
            "description": {
                "paragraphs": [
                    "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "head = [1,2,3,3,4,4,5]",
                        "output": "[1,2,5]"
                    },
                    {
                        "input": "head = [1,1,1,2,3]",
                        "output": "[2,3]"
                    }
                ],
                "constraints": [
                    " The number of nodes in the list is in the range [0, 300]. -100 <= Node.val <= 100 The list is guaranteed to be sorted in ascending order."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Remove Duplicates from Sorted List    ",
        "index": 78,
        "problemData": {
            "title": " Remove Duplicates from Sorted List    ",
            "description": {
                "paragraphs": [
                    "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "head = [1,1,2]",
                        "output": "[1,2]"
                    },
                    {
                        "input": "head = [1,1,2,3,3]",
                        "output": "[1,2,3]"
                    }
                ],
                "constraints": [
                    " The number of nodes in the list is in the range [0, 300]. -100 <= Node.val <= 100 The list is guaranteed to be sorted in ascending order."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Largest Rectangle in Histogram    ",
        "index": 79,
        "problemData": {
            "title": "Largest Rectangle in Histogram    ",
            "description": {
                "paragraphs": [
                    "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " heights = [2,1,5,6,2,3]",
                        "output": "10",
                        "explanation": "The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = units."
                    },
                    {
                        "input": "heights = [2,4]",
                        "output": " 4"
                    }
                ],
                "constraints": [
                    " 1 <= heights.length <= 105 0 <= heights[i] <= 104"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Maximal Rectangle    ",
        "index": 80,
        "problemData": {
            "title": "Maximal Rectangle    ",
            "description": {
                "paragraphs": [
                    "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " matrix = [[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]]",
                        "output": "6",
                        "explanation": "The maximal rectangle is shown in the above picture."
                    },
                    {
                        "input": "matrix = [[0]]",
                        "output": " 0"
                    },
                    {
                        "input": "matrix = [[1]]",
                        "output": " 1"
                    }
                ],
                "constraints": [
                    " rows == matrix.length cols == matrix[i].length 1 <= row, cols <= 200 matrix[i][j] is '0' or '1'. "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Partition List    ",
        "index": 81,
        "problemData": {
            "title": "Partition List    ",
            "description": {
                "paragraphs": [
                    "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "head = [1,4,3,2,5,2], x = 3",
                        "output": "[1,2,2,4,3,5]"
                    },
                    {
                        "input": " head = [2,1], x = 2",
                        "output": "[1,2]"
                    }
                ],
                "constraints": [
                    "The number of nodes in the list is in the range [0, 200]. -100 <= Node.val <= 100 -200 <= x <= 200"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Scramble String    ",
        "index": 82,
        "problemData": {
            "title": "Scramble String    ",
            "description": {
                "paragraphs": [
                    "We can scramble a string s to get a string t using the following algorithm:If the length of the string is 1, stop. If the length of the string is > 1, do the following: Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y. Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x. Apply step 1 recursively on each of the two substrings x and y. Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s1 = great, s2 = rgeat",
                        "output": "true",
                        "explanation": " One possible scenario applied on s1 is: great --> gr/eat // divide at random index. gr/eat --> gr/eat // random decision is not to swap the two substrings and keep them in order. gr/eat --> g/r / e/at // apply the same algorithm recursively on both substrings. divide at random index each of them. g/r / e/at --> r/g / e/at // random decision was to swap the first substring and to keep the second substring in the same order. r/g / e/at --> r/g / e/ a/t // again apply the algorithm recursively, divide at to a/t. r/g / e/ a/t --> r/g / e/ a/t // random decision is to keep both substrings in the same order.The algorithm stops now, and the result string is rgeat which is s2. As one possible scenario led s1 to be scrambled to s2, we return true."
                    },
                    {
                        "input": "s1 = abcde, s2 = caebd",
                        "output": "false"
                    },
                    {
                        "input": "s1 = a, s2 = a",
                        "output": " true"
                    }
                ],
                "constraints": [
                    " s1.length == s2.length 1 <= s1.length <= 30 s1 and s2 consist of lowercase English letters"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Merge Sorted Array    ",
        "index": 83,
        "problemData": {
            "title": "Merge Sorted Array    ",
            "description": {
                "paragraphs": [
                    "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
                        "output": "[1,2,2,3,5,6]",
                        "explanation": "The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."
                    },
                    {
                        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
                        "output": "[1]",
                        "explanation": "The arrays we are merging are [1] and []. The result of the merge is [1]."
                    },
                    {
                        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
                        "output": "[1]",
                        "explanation": "The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
                    }
                ],
                "constraints": [
                    " nums1.length == m + n nums2.length == n 0 <= m, n <= 200 1 <= m + n <= 200 -109 <= nums1[i], nums2[j] <= 109"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Gray Code    ",
        "index": 84,
        "problemData": {
            "title": "Gray Code    ",
            "description": {
                "paragraphs": [
                    "An n-bit gray code sequence is a sequence of 2n integers where: Every integer is in the inclusive range [0, 2n - 1], The first integer is 0, An integer appears no more than once in the sequence, The binary representation of every pair of adjacent integers differs by exactly one bit, and The binary representation of the first and last integers differs by exactly one bit.Given an integer n, return any valid n-bit gray code sequence."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " n = 2",
                        "output": "[0,1,3,2]",
                        "explanation": "The binary representation of [0,1,3,2] is [00,01,11,10]. - 00 and 01 differ by one bit - 01 and 11 differ by one bit - 11 and 10 differ by one bit - 10 and 00 differ by one bit [ 0, 2, 3, 1 ] is also a valid gray code sequence, whose binary representation is [ 00, 10, 11, 01 ]. - 00 and 10 differ by one bit - 10 and 11 differ by one bit - 11 and 01 differ by one bit - 01 and 00 differ by one bit"
                    },
                    {
                        "input": "n = 1",
                        "output": "[0,1]"
                    }
                ],
                "constraints": [
                    "1 <= n <= 16"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Subsets II    ",
        "index": 85,
        "problemData": {
            "title": "Subsets II    ",
            "description": {
                "paragraphs": [
                    "Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "nums = [1,2,2]",
                        "output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]"
                    },
                    {
                        "input": "nums = [0]",
                        "output": "[[],[0]]"
                    }
                ],
                "constraints": [
                    " 1 <= nums.length <= 10 -10 <= nums[i] <= 10"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Decode Ways    ",
        "index": 86,
        "problemData": {
            "title": "Decode Ways    ",
            "description": {
                "paragraphs": [
                    "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> 1 'B' -> 2... 'Z' -> 26 To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, 11106 can be mapped into: AAJF with the grouping (1 1 10 6) KJF with the grouping (11 10 6) Note that the grouping (1 11 06) is invalid because 06 cannot be mapped into 'F' since 6 is different from 06. Given a string s containing only digits, return the number of ways to decode it. The test cases are generated so that the answer fits in a 32-bit integer."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " s = 12",
                        "output": "2",
                        "explanation": "226 could be decoded as BZ (2 26), VF (22 6), or BBF (2 2 6)."
                    },
                    {
                        "input": " s = 226",
                        "output": "3",
                        "explanation": "226 could be decoded as BZ (2 26), VF (22 6), or BBF (2 2 6)."
                    },
                    {
                        "input": " s = 06",
                        "output": " 0",
                        "explanation": "06 cannot be mapped to F because of the leading zero (6 is different from 06)."
                    }
                ],
                "constraints": [
                    " 1 <= s.length <= 100 s contains only digits and may contain leading zero(s). "
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Reverse Linked List II    ",
        "index": 87,
        "problemData": {
            "title": "Reverse Linked List II    ",
            "description": {
                "paragraphs": [
                    "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " head = [1,2,3,4,5], left = 2, right = 4",
                        "output": "[1,4,3,2,5]"
                    },
                    {
                        "input": "head = [5], left = 1, right = 1",
                        "output": "[5]"
                    }
                ],
                "constraints": [
                    " The number of nodes in the list is n. 1 <= n <= 500 -500 <= Node.val <= 500 1 <= left <= right <= n"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Restore IP Addresses    ",
        "index": 88,
        "problemData": {
            "title": "Restore IP Addresses    ",
            "description": {
                "paragraphs": [
                    "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros. For example, 0.1.2.201 and 192.168.1.1 are valid IP addresses, but 0.011.255.245, 192.168.1.312 and 192.168@1.1 are invalid IP addresses. Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "s = 25525511135",
                        "output": "[255.255.11.135,255.255.111.35]"
                    },
                    {
                        "input": " s = 0000",
                        "output": "[0.0.0.0]"
                    },
                    {
                        "input": "s = 101023",
                        "output": "[1.0.10.23,1.0.102.3,10.1.0.23,10.10.2.3,101.0.2.3]"
                    }
                ],
                "constraints": [
                    " 1 <= s.length <= 20 s consists of digits only."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Binary Tree Inorder Traversal    ",
        "index": 89,
        "problemData": {
            "title": "Binary Tree Inorder Traversal    ",
            "description": {
                "paragraphs": [
                    "Given the root of a binary tree, return the inorder traversal of its nodes' values."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "root = [1,null,2,3]",
                        "output": "[1,3,2]"
                    },
                    {
                        "input": "root = []",
                        "output": "[]"
                    },
                    {
                        "input": "root = [1]",
                        "output": "[1]"
                    }
                ],
                "constraints": [
                    " The number of nodes in the tree is in the range [0, 100]. -100 <= Node.val <= 100"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Unique Binary Search Trees II    ",
        "index": 90,
        "problemData": {
            "title": "Unique Binary Search Trees II    ",
            "description": {
                "paragraphs": [
                    "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "n = 3",
                        "output": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]"
                    },
                    {
                        "input": " n = 1",
                        "output": " [[1]]"
                    }
                ],
                "constraints": [
                    "1 <= n <= 8"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Unique Binary Search Trees    ",
        "index": 91,
        "problemData": {
            "title": "Unique Binary Search Trees    ",
            "description": {
                "paragraphs": [
                    "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "n = 3",
                        "output": "5"
                    },
                    {
                        "input": " n = 1",
                        "output": " 1"
                    }
                ],
                "constraints": [
                    "1 <= n <= 19"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "MEDIUM",
        "status": "Status",
        "title": "Interleaving String    ",
        "index": 92,
        "problemData": {
            "title": "Interleaving String    ",
            "description": {
                "paragraphs": [
                    "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2. An interleaving of two strings s and t is configuration where s and t are divided into n and m substrings respectively, such that: s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| <= 1 The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Note: a + b is the concatenation of strings a and b."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": " s1 = aabcc, s2 = dbbca, s3 = aadbbcbcac",
                        "output": " true",
                        "explanation": "One way to obtain s3 is: Split s1 into s1 = aa + bc + c, and s2 into s2 = dbbc + a. Interleaving the two splits, we get aa + dbbc + bc + a + c = aadbbcbcac. Since s3 can be obtained by interleaving s1 and s2, we return true."
                    },
                    {
                        "input": "s1 = aabcc, s2 = dbbca, s3 = aadbbbaccc",
                        "output": "false",
                        "explanation": "Notice how it is impossible to interleave s2 with any other string to obtain s3."
                    },
                    {
                        "input": " s1 = , s2 = , s3 = ",
                        "output": "true"
                    }
                ],
                "constraints": [
                    " 0 <= s1.length, s2.length <= 100 0 <= s3.length <= 200 s1, s2, and s3 consist of lowercase English letters."
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": "Validate Binary Search Tree    ",
        "index": 93,
        "problemData": {
            "title": "Validate Binary Search Tree    ",
            "description": {
                "paragraphs": [
                    "Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. "
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "root = [2,1,3]",
                        "output": " true"
                    },
                    {
                        "input": "root = [5,1,4,null,null,3,6]",
                        "output": "false",
                        "explanation": "The root node's value is 5 but its right child's value is 4."
                    }
                ],
                "constraints": [
                    " The number of nodes in the tree is in the range [1, 104]. -231 <= Node.val <= 231 - 1"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "HARD",
        "status": "Status",
        "title": " Recover Binary Search Tree",
        "index": 94,
        "problemData": {
            "title": " Recover Binary Search Tree",
            "description": {
                "paragraphs": [
                    "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "root = [1,3,null,null,2]",
                        "output": "[3,1,null,null,2]",
                        "explanation": "3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."
                    },
                    {
                        "input": "root = [3,1,4,null,null,2]",
                        "output": " [2,1,4,null,null,3]",
                        "explanation": " 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
                    }
                ],
                "constraints": [
                    " The number of nodes in the tree is in the range [2, 1000]. -231 <= Node.val <= 231 - 1"
                ]
            }
        }
    },
    {
        "solution": "https://youtube.com",
        "diffculity": "EASY",
        "status": "Status",
        "title": "Same Tree    ",
        "index": 95,
        "problemData": {
            "title": "Same Tree    ",
            "description": {
                "paragraphs": [
                    "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."
                ],
                "images": [
                    ""
                ],
                "examples": [
                    {
                        "input": "p = [1,2,3], q = [1,2,3]",
                        "output": "true"
                    },
                    {
                        "input": "p = [1,2], q = [1,null,2]",
                        "output": "false"
                    },
                    {
                        "input": " p = [1,2,1], q = [1,1,2]",
                        "output": " false"
                    }
                ],
                "constraints": [
                    " The number of nodes in both trees is in the range [0, 100]. -104 <= Node.val <= 104 "
                ]
            }
        }
    }
]